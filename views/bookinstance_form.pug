extends layout

block content
	- const states = ["Maintenance", "Available", "Loaned", "Reserved"];
	h1= title

	form(method="POST" action="")
		div.form-group
			label(for="book") Book:
			select#book.form-control(type="select" placeholder="Select book" name="book" required="true")
				- book_list.sort(function(a,b) {let textA = a.title.toUpperCase(); let textB = b.title.toUpperCase(); return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;});
				for book in book_list
					if bookinstance
						// Handle GET form, where bookinstance.book is an object, and POST where bookinstance.book is a string
						option(value=book._id selected=(bookinstance.book.toString() === book._id.toString() || bookinstance.book._id.toString() === book._id.toString() ? "selected" : false)) #{book.title}
					else
						option(value=book._id) #{book.title}

			div.form-group
				label(for="imprint") Imprint:
				input#imprint.form-control(type="text" placeholder="Publisher and date information" name="imprint" required="true" value=(bookinstance === undefined ? "" : bookinstance.imprint))
			div.form-group
				label(for="due_back") Date when book available:
				// Only give a due back date if the book instance is unavailable
				input#due_back.form-control(type="date" name="due_back" value=(bookinstance === undefined || bookinstance.status === "Available" ? "" : bookinstance.due_back_datecontrol))

			div.form-group
				label(for="status") Status:
				select#status.form-control(type="select" placeholder="Select status" name="status" required="true")

					each state in states
						if(bookinstance && bookinstance.status === state)
							option(value=state selected) #{state}
						else 
							option(value=state) #{state}

				button.btn.btn-primary(type="submit") Submit

			if errors
				ul
					for error in errors
						li!= error.msg
